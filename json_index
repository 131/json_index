#!/usr/bin/env node

require('nyks');
var fs       = require('fs');
var glob     = require("glob");
var path     = require("path");



function escapeRegExp(str) {
  return str.replace(/[\/]/g, "\\$&");
}


var excludes = [], args = [], remap = {};
process.argv.each(function(arg, k){
  if(arg.startsWith('--exclude='))
    excludes.push(new RegExp(escapeRegExp(arg.stripStart('--exclude='))));

  if(arg.startsWith('--remap://')) {
    var map = arg.stripStart('--remap://').split('=');
    remap[map[0]] = map[1];
  }

  if(arg.startsWith('--')) ;
  else args.push(arg);
});

var cwd       = args[2] || process.cwd();
var start_dir = args[3] || "/" ;


// options is optional
var files_path = glob.sync("**", {cwd : cwd});
files_path = files_path.filter(function(path){ return path != ""; });
files_path = Object.combine(files_path, files_path);

var files = {};


Object.each(files_path, function(file_path, file_rel){
  if(file_path in remap)
    file_rel = remap[file_path];

  if(excludes.some(function(value){
    return value.test(file_path);
  })) return;

  var stats = fs.statSync(cwd + "/" + file_path)
  if(!stats.isFile())
    return;

  files[start_dir + file_rel] = {
      'file_md5'   : fs.md5FileSync(cwd + "/" + file_path),
      'file_url'   : start_dir + file_path,
      'file_size'  : stats.size,
      'file_path'  : start_dir + file_rel,
  };
});

process.stdout.write(JSON.stringify(files));
